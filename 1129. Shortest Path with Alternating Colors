//https://leetcode.com/problems/shortest-path-with-alternating-colors/
class Solution 
{
    public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red, vector<vector<int>>& blue) 
    {
        vector<vector<int>> path_dist(2, vector<int>(n, -1));
        path_dist[0][0] = path_dist[1][0] = 0;
        int edges[2][101][101] = {0};
        int rn = red.size(), bn = blue.size();

        for(auto& it : red)
        {
            edges[0][it[0]][it[1]] = 1;
        }

        for(auto& it : blue)
        {
            edges[1][it[0]][it[1]] = 1;
        }
        
        queue<pair<int, int>>q;
        q.push({0, 0}); 
        q.push({0, 1});
        while(q.size())
        {
            
            int sz = q.size(); // проверяем соседей
            while(sz--)
            {
                int cur_node = q.front().first, color = q.front().second; // color это текущий цвет ребра
                q.pop(); 
                
                for(int i = 0; i < n; i++)
                {
                    if(edges[color ^ 1][cur_node][i]) // если есть путь к вершине противоположного цвета
                    {
                        if(path_dist[color ^ 1][i] == -1) //если там не были, устанавливаем расстояние + 1 (эта вершина + 1)
                        {
                            path_dist[color ^ 1][i] = path_dist[color][cur_node] + 1; // новый противоположный цвет
                            q.push({i, color ^ 1}); // цвет дб противоположным
                        }
                        else // то есть если были, меняем на меньшее значение, если можно
                        {
                            path_dist[color ^ 1][i] = min(path_dist[color][cur_node] + 1, path_dist[color ^ 1][i]); // меняем противоположный цвет
                        }
                    }
                }
            }
        }
        
        vector<int>res;
        for(int i = 0; i < n; i++)
        {
            if(path_dist[0][i] == -1 && path_dist[1][i] == -1)
            {
                res.push_back(-1);
            }
            else if(path_dist[0][i] == -1)
            {
                res.push_back(path_dist[1][i]);
            }
            else if(path_dist[1][i] == -1)
            {
                res.push_back(path_dist[0][i]);
            }
            else
            {
                res.push_back(min(path_dist[0][i], path_dist[1][i]));
            }
        }
        return res;
    }
};
